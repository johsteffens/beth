/** Author and Copyright 2019 Johannes Bernhard Steffens
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/** bcore_spect_via_call is a perspective defining a set of callback functions
 *  related to via-access.
 */

#ifndef BCORE_SPECT_VIA_CALL_H
#define BCORE_SPECT_VIA_CALL_H

#include "bcore_xoila.h"
#include "bcore_spect.h"
#include "bcore_spect_inst.h"
#include "bcore.xo.h"
#include "bcore_trait.h"

/**********************************************************************************************************************/

#ifdef TYPEOF_bcore_via_call
XOILA_DEFINE_GROUP( bcore_via_call, bcore_inst )
#ifdef XOILA_SECTION // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /** Features below are not generated by the via perspective. They are generated by
      * operators making use of the via perspective to access object elements.
      */

    /** Called when object was mutated from a source, passing that source as argument.
     *  This signal is generated by an object modifier.
     *  Typical modifiers are: Interpreter
     *  Note: This feature is executed before feature 'mutated' below.
     */
    feature 'ptr' void source( mutable, bcore_source* source );

    /** Called when object was mutated through via-access.
     *  This signal is generated by an object modifier.
     *  Typical modifiers are: Interpreter, GUI Accessor
     */
    feature 'ptr' void mutated( mutable );

    /** Called when object should be transformed into a state to be shelved.
     *  This means permanently-stored, transferred, serialized, etc.
     *  This signal is generated by a 'shelver'.
     *  Typical shelvers are: Translator
     *
     *  Note:
     *    If an object implements this feature, the 'shelver' may opt to create a temporary copy
     *    of the the object in order to obtain modification privileges to execute 'shelve'.
     *    This can cause extra overhead. Therefore 'shelve' should only be implemented
     *    when needed.
     */
    feature 'ptr' void shelve( mutable );

#endif // XOILA_SECTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#endif // TYPEOF_bcore_via_call

/**********************************************************************************************************************/

vd_t bcore_spect_via_call_signal_handler( const bcore_signal_s* o );

/**********************************************************************************************************************/

#endif  // BCORE_SPECT_VIA_CALL_H
