/** BTCL selftest
 *  Returns number of failed tests.
 */

(

(
    embed( "test_embed.btcl" );
    ASSERT( embed_function( 1, 2 ) == 3 );
);

ASSERT( ( embed( "test_embed.btcl" ) ) == 1234 );

(
    prefix( prf, embed( "test_embed.btcl" ) );
    ASSERT( prf_embed_function( 1, 2 ) == 3 );
);

/// basics
ASSERT( TRUE == (1==1) );
ASSERT( 5 + 3 * 2 == 11 );
ASSERT( 5^2 == 25 );
ASSERT( 6/2 == 3 );
ASSERT( 6.5/2 == 3.25 );
ASSERT( 13%10 == 3 );
ASSERT( -( 5 + 3 * 2 ) == 0-11 );
ASSERT( x = 5; x + 3 * 2 == 11 );
ASSERT( x = 12; x + "ab" + x == "12ab12" );
ASSERT( x = 12; x + x + "ab" == "24ab" );
ASSERT( x = func(){5}; -x()*2 == -10 );

/// conditional operator
ASSERT( ( x = 2; y = 3;      (x > y) ? "A" : "B" )   == "B" ); // using -- ? -- : --
ASSERT( ( x = 2; y = 3; IFE( (x > y),  "A" , "B" ) ) == "B" ); // using IFE
ASSERT( IFE( (2 > 3), 2 , 3 ) == 3 );

/// numeric suffixes
ASSERT( 5D  == 50 );
ASSERT( 4C  == 400 );
ASSERT( 3K  == 3000 );
ASSERT( 3M  == 3000000 );
ASSERT( ABS( 44.1K - 44100 ) < 1E-3 );
ASSERT( ABS( 5d - 0.5      ) < 1E-4 );
ASSERT( ABS( 5c - 0.05     ) < 1E-5 );
ASSERT( ABS( 5m - 0.005    ) < 1E-6 );
ASSERT( ABS( 5u - 0.000005 ) < 1E-9 );

/// testing num-dominace in comparison
ASSERT( [1.0,2.0,3.0] == [1,2,3] );

// ---------------------------------------------------------------------------------------------------------------------

/// buildin functions
ASSERT( ABS( -3 ) == 3 );
ASSERT( MAX( 1, 2 ) == 2 );
ASSERT( MIN( 1, 2 ) == 1 );

// ---------------------------------------------------------------------------------------------------------------------

/// functions
f1 = func( a, b ) { a + b };
f2 = f1 * 1;
f3 = f2 * 2;
ASSERT( f3 == 3 );

f3 = f2 << 3 + 1; // same as f2 * ( 3 + 1 ); stream has lower priority
ASSERT( f3 == 5 );

// ---------------------------------------------------------------------------------------------------------------------
/// recursions

// infinite recursions: expression below produces a frame depth error
//func() { self() }();

/// factorial function
factorial = func( x ) { if( x <= 1 ) { 1.0 } else { x * self( x - 1 ) } };

ASSERT( factorial( 4 ) == 24 );

/// ackermann function
ackermann = func( n, m )
{
    if( n == 0 )
    {
        m + 1
    }
    else
    {
        if( m == 0 )
        {
            self( n - 1, 1 )
        }
        else
        {
            self( n - 1, self( n, m - 1 ) )
        }
    }
};

ASSERT( ackermann( 3, 1 ) == 13 );

// ---------------------------------------------------------------------------------------------------------------------
/// func chain
f_head = func( a, b ) { a + b };
f1 = func( a ) { a +   1 };
f2 = func( a ) { a +  10 };
f3 = func( a ) { a + 100 };
f_chained = ( f3 ** f2 ) ** ( f1 ** f_head );
ASSERT( f_chained( 1, 2 ) == 114 );

/// args list
ASSERT( f_head *. [1,2] == 3 );

// ---------------------------------------------------------------------------------------------------------------------
/// stamps, members, type conversion

s = <bcore_hnode_tpuz_s> key: 10 val: 20 </>;
ASSERT( s.key == 10 && s.val == 20 );

// modifier
s = s( .key= 30, .val = 40 );
ASSERT( s.key == 30 && s.val == 40 );

// type conversion float -> bool
ASSERT( <bl_t/>( 0.0 ) == FALSE );
ASSERT( <bl_t/>( 0.1 ) == TRUE );

// ---------------------------------------------------------------------------------------------------------------------
/// external function

ext_add_a   = <x_btcl_btcl_function_stamp_s></> ( .additive = 10 ).add_a;
ext_add_a_b = <x_btcl_btcl_function_stamp_s/>( .additive = 10 ).add_a_b;
ASSERT( ext_add_a  ( 2    ) == 12 );
ASSERT( ext_add_a_b( 2, 3 ) == 15 );

// ---------------------------------------------------------------------------------------------------------------------
/// partial function call

f = func( a, b, c, d ) { 1000 * a + 100 * b + 10 * c + d };
ASSERT( f( 1, 2, 3 )( 4 )   == 1234 );
ASSERT( f( 1, 2 )( 3 )( 4 ) == 1234 );
ASSERT( f( 1 )( 2 )( 3, 4 ) == 1234 );

// ---------------------------------------------------------------------------------------------------------------------
/// lists

ASSERT( [1,2,3]       == (1:2:3) );
ASSERT( [1,2,3]       == ([1,2]:3) );
ASSERT( ([1,2]:[3])   == [1,2,3] );
ASSERT( ([1,2]:[[3]]) == [1,2,[3]] );

list = [1,2,3];
ASSERT( SIZE( list ) == 3 );
ASSERT( list.SIZE() == 3 );
ASSERT( list.arr.SIZE() == 3 );
ASSERT( list.[ 0 ] == 1 && list.[ 1 ] == 2 );

arr = <bcore_arr_s3_s/>(list);
ASSERT( arr.[ 0 ] == 1 && arr.[ 1 ] == 2 );

ASSERT( (3::0) == [0,0,0] );
ASSERT( (3::func(x){x+1}) == [1,2,3] );

ASSERT( ([1,2,3]::func(x){-x}) == [-1,-2,-3] );
ASSERT( (func(x){-x}*:[1,2,3]) == [-1,-2,-3] );

ASSERT( ([0]*[1,2]*[4,5]) == ([[0,1,4],[0,1,5],[0,2,4],[0,2,5]]));

ASSERT( (func(a,b){a*b}*.:([1,2]*[4,5])) == [4,5,8,10] );

// ---------------------------------------------------------------------------------------------------------------------
/// spawned recursion

ASSERT( (["a","b","c","d"] :: func(a,b) { a + b }) == "abcd" );

// ---------------------------------------------------------------------------------------------------------------------
/// functor

fo1 = <x_btcl_functor_s/>( func( a, b ){ a - b } );
ASSERT( fo1.call( 2, 3 ) == -1 );

fo2 = <x_btcl_functor_f3_s/>( func( a, b ){ a - b } );
ASSERT( fo2.call( 2, 3 ) == -1 );

// ---------------------------------------------------------------------------------------------------------------------
/// network

net_node = @sine( .frq = 1000 );
net_rack = @:xyz( .lfo = net_node( .frq = 234 )( .frq2 = 123 ), 456, 889 );
net_wire = @~xyz.lfo;
ASSERT( net_node.frq == 1000 );
ASSERT( net_rack.lfo.frq == 234 );
net_rack << net_node;

// ---------------------------------------------------------------------------------------------------------------------
/// bug fixes

f = func(){y=10}; // assignment result was not cloned when frame was closed (buggy code returned 0)
ASSERT( f() == 10 );

PRINT( "BTCL: Selftest finished successfully.\n" );

0

)
