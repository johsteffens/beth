Language notes:

// declaring a variable
<type> <name>;
// Example:
s3_t v;

<type> can be any type capable to spawn a variable.
This includes generic types such a traits.

// assigning values
'=' is used to specify assignment. It usually means copying the content of the object.
If the object is a pointer, then it means copying the address.

// defining a constant
<name> := <expression>;
// Example:
v := 100;

<expression> can have any valid form. The object <name> assumes the properties of the expression.
Typical usage:

Functions:
Functions are first class objects.

Function definition:
getchar := ( u0_t <- st_s string, sz_t index )
{
    return string[ index ];
}

Class definition:
person := class root
{
    aware_t _;
    st_s name;
    sz_t age;
};

Function variable:

A function variable can have the form
( <ret> <- <args...> ) fv;
This is a function with defined signature but variable body.

Assigning a body can have the form. The signature must be compatible with the variable's definition.
fv = ( <ret> <- <args...> ){ ... }
alternatively:
fv = { ... }, in which case the signature is assumed to match exactly that of the declaration.


16 Nov 2017:

All functionality can be represented by functions func := ret( arg1, arg2, ... ). This includes declaration, type construction, assignment, etc
- We use operator overloading for the more convenient details of the language. Operators need not be built in (they can be created form source code)
  - Space-operator (operator represented by mere whitespace between two identifiers. (Note that such a constellation does not occur in the pure functional notation)
    Example:
        Variable declaration could be represented by function 'decl_var := void( type, address )'
        The binary space-operator 'type' 'space' 'address' would be mapped to def_var
        Thus a familiar declaration like 'sz_t size' is bound to 'decl_var( sz_t, size )'
        
Type checking:
- Types (actually traits) are to be checked as parsetime
- All functions have a signature.
- Since all functionality can be expressed by functions, typechecking can be reduced to evaluating
  those signatures (O(1)).
- The library contains a map of each address to the object trait such that traits can always been retrieved.
  




